#version 330 core

layout(location = 0) in vec2 vertexPosition_board;
layout(location = 1) in vec3 vertexColor;

uniform float xscale;
uniform float yscale;
uniform float center_x;
uniform float center_y;
uniform float animation_phase;
uniform float darkening;
uniform int animation_mode;
uniform bool reversed;

out vec4 fragmentColor;

vec3 HSLtoRGB(vec3 c);
vec3 RGBtoHSL(vec3 c);
vec3 lighten_color(vec3 color, float amt);

void main(){
    vec3 color = vertexColor;

    // Base position and scale
    gl_Position.x = vertexPosition_board.x * xscale;
    gl_Position.y = vertexPosition_board.y * yscale;
    if(reversed) gl_Position.x *= -1.0f;

    // Process animation
    if(animation_mode == 0){ //uncover animation
        gl_Position.y += (gl_Position.y) * ( gl_Position.x + 0.1) * sin( animation_phase * 3.14159265358 ) * 0.9;
        gl_Position.x *= cos( animation_phase * 3.14159265358 );
    }
    if(animation_mode == 1){
        gl_Position.x += (gl_Position.x) * ( gl_Position.y ) * sin( animation_phase * 3.14159265358 ) * 0.9;
        gl_Position.y *= cos( animation_phase * 3.14159265358 );
    }
    if(animation_mode == 2) ; //wait animation

    // Apply color and lighting effect
    if(animation_mode == 0 || animation_mode == 1){
        float lighting = -sin( animation_phase * 3.14159265358 * 2);
        if(animation_phase >= 0.25 && animation_phase <= 0.5) lighting = -1.0;
        lighting = lighting*lighting*lighting;
        color = lighten_color(color, 1.0 + 0.8*lighting);
    }
    color = lighten_color(color, 1.0-darkening);

    gl_Position.z = 0.0 + 0.000001*darkening;
    gl_Position.w = 1.0;

    // Translate to card's position on board
    gl_Position += vec4(center_x, center_y, 0.0, 0.0);

    // Leave a (global) margin above the board
    gl_Position.y *= 0.9;
    gl_Position.y -= 0.1;

    fragmentColor = vec4(color, 1.0);
}

vec3 lighten_color(vec3 color, float ratio){
    vec3 hls = RGBtoHSL(color);
    hls.z *= ratio;
    return HSLtoRGB( clamp( hls , vec3(0.0), vec3(1.0)));
}

// I admit, I do not know how exactly the conversion between rgb<->hsv works.
// I've taken these routines from the web.
float Epsilon = 1e-10;
vec3 RGBtoHCV(in vec3 RGB){
    vec4 P = (RGB.g < RGB.b) ? vec4(RGB.bg, -1.0, 2.0/3.0) : vec4(RGB.gb, 0.0, -1.0/3.0);
    vec4 Q = (RGB.r < P.x) ? vec4(P.xyw, RGB.r) : vec4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return vec3(H, C, Q.x);
}
vec3 RGBtoHSL(in vec3 RGB){
    vec3 HCV = RGBtoHCV(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon);
    return vec3(HCV.x, S, L);
}
vec3 HUEtoRGB(float H){
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return clamp(vec3(R,G,B),0.0,1.0);
}
vec3 HSLtoRGB(vec3 HSL){
    vec3 RGB = HUEtoRGB(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
