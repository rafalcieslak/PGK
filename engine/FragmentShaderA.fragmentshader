#version 330 core

in vec4 baseColor;
out vec4 color;
in vec3 normal_cameraspace;
in vec3 vector_to_light_cameraspace;
in vec3 vector_to_camera_cameraspace;
in float lightdistance;

void main()
{

	vec3 N = normalize( normal_cameraspace );
	vec3 L = normalize( vector_to_light_cameraspace );
	vec3 V = normalize( vector_to_camera_cameraspace );
	vec3 R = reflect(-L,N);
 	vec3 diffuse_color = baseColor.xyz * max( 0.0f, dot(N,L));
	vec3 spatial_color = baseColor.xyz * pow( max( 0.0f, dot(V,R)) ,10) / pow(lightdistance, 0.4);
	vec3 ambient_color = baseColor.xyz*vec3(0.15,0.15,0.15);
	color = vec4(min(1.1*diffuse_color + 1.1*spatial_color + ambient_color, vec3(1.0)), 1.0f);
}
