#version 330 core

layout(location = 0) in vec3 vertexPosition_model;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 vertexNormal_model;

uniform mat4 model_transform;
uniform mat4 camera_transform;
uniform mat4 perspective_transform;

uniform int anim_mode = 0;
uniform float anim_phase;

uniform vec3 lightpos_global;

out vec4 baseColor;
out vec3 normal_cameraspace;
out vec3 vector_to_light_cameraspace;
out vec3 vector_to_camera_cameraspace;
out float lightdistance;
out float cameradistance;

void main(){
    vec4 color = vertexColor;

    vec4 vertexPosition_cameraspace = camera_transform * model_transform * vec4(vertexPosition_model,1.0f);
    vec4 vertexPosition_perspective =  perspective_transform * vertexPosition_cameraspace;

    vec3 camerapos_cameraspace = vec3(0.0,0.0,0.0);
    vector_to_camera_cameraspace = camerapos_cameraspace - vertexPosition_cameraspace.xyz;

    vec3 lightpos_cameraspace = ( camera_transform * vec4(lightpos_global,1.0f)).xyz;
    lightdistance = distance(vertexPosition_cameraspace.xyz, lightpos_cameraspace);
    cameradistance = distance(vertexPosition_cameraspace.xyz, camerapos_cameraspace);
    vector_to_light_cameraspace = lightpos_cameraspace + vector_to_camera_cameraspace;

    normal_cameraspace = normalize( camera_transform * model_transform * vec4(vertexNormal_model,0.0f)).xyz;

    gl_Position = vertexPosition_perspective;

    float alpha = 1.0;
    if(anim_mode == 1) alpha = 1.0 - anim_phase; // fadeout
    color.a *= alpha;

    baseColor = color;

}
