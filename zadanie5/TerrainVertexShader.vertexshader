#version 330 core

#define M_PI 3.14159265

//layout(location = 0) in int attrPosition;
layout(location = 0) in uint attrPosition;
layout(location = 1) in int attrData;
layout(location = 2) in int attrNormalX;
layout(location = 3) in int attrNormalY;

uniform mat4 camera_transform;
uniform mat4 perspective_transform;

uniform vec2 pos;
uniform float xscale;

out vec4 fcolor;

out vec3 normal_global;
out vec3 vector_to_light_global;
out vec3 vector_to_camera_global;
//out float lightdistance;

#define HSCALE (1.0/30)

vec3 getcolor(float ht){
    vec3 color;
    if      (ht < 0  )   color = vec3(0.,       0.,        1.); //blue
    else if (ht < 10  )  color = vec3(0.,       0.5*ht/10,        1.-ht/10); //blue
    else if (ht < 500)   color = vec3(0.,       ht/1000 + 0.5,    0.); //->green
    else if (ht < 1000)  color = vec3(ht/500-1, 1.,        0.); //->yellow
    else if (ht < 2000)  color = vec3(1.,       2.-ht/1000,0.); //->red
    else if (ht < 3000)  color = vec3(1.,       ht/1000-2 ,ht/1000-2); //->red
    else                 color = vec3(1.,1.,1.);                //white
    return color;
}

void main(){
    float a = 1.0;
    if(attrData == -32768) a = -1e20;
    vec3 position = vec3(0.0,0.0,0.0);
    uint posXi = attrPosition >> 16;
    uint posYi = attrPosition & uint(0xffff);
    float posX = float(posXi)/1200.0;
    float posY = float(posYi)/1200.0;

    float height = attrData*HSCALE/1200;

    position = vec3(posX-0.5, -posY+0.5, height);
    position += vec3(pos,0.0);

    position.x *= xscale;

    vec4 vertexPosition_cameraspace = camera_transform * vec4(position,1.0);
    gl_Position = perspective_transform * vertexPosition_cameraspace;
    //fcolor = vec4(getcolor(attrNormalX*100+1000),a);
    fcolor = vec4(getcolor(attrData),a);

    vec3 normal = vec3(attrNormalX*HSCALE, attrNormalY*HSCALE, 10);

    normal_global = (normalize(normal)).xyz;

    vec3 lightpos_global = vec3(0.0,-400.0,100.0);

    vec3 camerapos_global = -transpose(mat3(camera_transform)) * camera_transform[3].xyz;
    //lightdistance = distance(position.xyz, lightpos_global);
    vector_to_light_global = lightpos_global - position;
    vector_to_camera_global = camerapos_global - position;
}
