#version 330 core

#define M_PI 3.14159265

//layout(location = 0) in int attrPosition;
layout(location = 0) in uint attrPosition;
layout(location = 1) in int attrData;
layout(location = 2) in int attrNormalX;
layout(location = 3) in int attrNormalY;

uniform mat4 camera_transform;
uniform mat4 perspective_transform;

uniform float light_intensity;
uniform float light_angle;

uniform vec2 pos;
uniform float xscale;
uniform int sphere;
uniform float terrainscale;

out vec4 fcolor;

out vec3 normal_global;
out vec3 vector_to_light_global;
out vec3 vector_to_camera_global;

#define HSCALE (1.0/30)

vec3 transformcoords(vec3 pos, float height){
    float q = cos(pos.y * 0.0174532925);
    float h = (6371000 + height*terrainscale)/6371000;
    return vec3(sin(pos.x * 0.0174532925)*q,-cos(pos.x * 0.0174532925)*q,sin(pos.y * 0.0174532925)) * h;
}

vec3 getcolor(float ht){
    vec3 color;
    if      (ht < 0  )   color = vec3(0.,       0.,           1.       ); //blue
    else if (ht < 10  )  color = vec3(0.,       0.5*ht/10,    1.-ht/10 ); //blue->dgreen
    else if (ht < 500)   color = vec3(0.,       ht/1000 + 0.5,0.       ); //dgreen->lgreen
    else if (ht < 1000)  color = vec3(ht/500-1, 1.,           0.       ); //lgreen->yellow
    else if (ht < 2000)  color = vec3(1.,       2.-ht/1000,   0.       ); //yellow->dred
    else if (ht < 3000)  color = vec3(1.,       ht/1000-2,    ht/1000-2); //dred->lred
    else                 color = vec3(1.,1.,1.);//white
    return color;
}

void main(){
    float a = 1.0;
    if(attrData == -32768) a = -1e20;
    uint posXi = attrPosition >> 16;
    uint posYi = attrPosition & uint(0xffff);
    float posX = float(posXi)/1200.0 + pos.x;
    float posY = float(posYi)/-1200.0 + pos.y;

    vec3 position_global = vec3(posX,posY, attrData);

    fcolor = vec4(getcolor(attrData),a);

    normal_global = normalize(vec3(attrNormalX*HSCALE, attrNormalY*HSCALE, light_intensity));

    vec3 lightpos_global = vec3(sin(light_angle)*40000.0,-cos(light_angle)*40000.0,10000.0);

    vec3 camerapos_global = -transpose(mat3(camera_transform)) * camera_transform[3].xyz;
    vector_to_light_global = lightpos_global - position_global;
    vector_to_camera_global = camerapos_global - position_global;


    vec3 position2 = (sphere==1)?transformcoords(position_global,attrData):vec3(position_global.x*xscale,position_global.y,1.0);
    gl_Position = perspective_transform * camera_transform * vec4(position2,1.0);
}
