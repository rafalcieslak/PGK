#version 330 core

out vec4 out_color;

in vec2 UV;
in vec3 normal_global;
in vec3 vector_to_camera_global;
in vec3 vector_to_light_global;

uniform sampler2D tex_sampler_diffuse;
uniform sampler2D tex_sampler_ambient;
uniform sampler2D tex_sampler_spectral;

uniform vec3 color_diffuse;
uniform vec3 color_ambient;
uniform vec3 color_spectral;

uniform int use_diffuse_texture;
uniform int use_ambient_texture;
uniform int use_spectral_texture;

uniform float specular_hardness;
uniform float alpha;

void main()
{
	vec3 N = normalize( normal_global );
	vec3 V = normalize( vector_to_camera_global );
	vec3 L = normalize( vector_to_light_global );
	vec3 R = reflect(-L,N);

	vec3 colorD, colorA, colorS;
	/*
	colorD = (use_diffuse_texture  == 0)? color_diffuse  : texture2D( tex_sampler_diffuse,  UV ).rgb;
	colorA = (use_ambient_texture  == 0)? color_ambient  : texture2D( tex_sampler_ambient,  UV ).rgb;
	colorS = (use_spectral_texture == 0)? color_spectral : texture2D( tex_sampler_spectral, UV ).rgb;
	*/
	colorD = color_diffuse;
	colorA = color_ambient;
	colorS = color_spectral;

	float diffusemult = max( 0.0f, dot(N,L)) / 1.0;
	//diffusemult = 0.165*ceil(8.0*diffusemult) * pow(dot(N,V),0.1);
	float spectralmult = pow( max( 0.0f, dot(V,R)) , 30.0) / 1.0;
	spectralmult = smoothstep(0.5,0.9, spectralmult);

	colorD *= diffusemult;
	colorS *= spectralmult;
	if(specular_hardness < 1.0) colorS = vec3(0.0);
	colorA *= 1.0;

	out_color = vec4( colorD*1.3f + colorS*1.0f + colorA*0.2f, alpha);
	float dark = smoothstep(0.3,0.55,dot(N,V));
	dark = pow(dark,4.0);
	out_color = mix(vec4(0.0,0.0,0.0,1.0),out_color,dark);
}
